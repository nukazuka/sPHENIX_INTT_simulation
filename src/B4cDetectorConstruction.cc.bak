//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id$
//
/// \file B4cDetectorConstruction.cc
/// \brief Implementation of the B4cDetectorConstruction class

#include "B4cDetectorConstruction.hh"

B4cDetectorConstruction::B4cDetectorConstruction()
  : G4VUserDetectorConstruction(),
    //   fMessenger(0),
    //   fMagField(0),
    fCheckOverlaps(false)
{
  // Define /B4/det commands using generic messenger class
  //  fMessenger
  //    = new G4GenericMessenger(this, "/B4/det/", "Detector construction control");

  // Define /B4/det/setMagField command
  //  G4GenericMessenger::Command& setMagFieldCmd
  //    = fMessenger->DeclareMethod("setMagField",
  //                                &B4cDetectorConstruction::SetMagField,
  //                                "Define magnetic field value (in X direction");
  //  setMagFieldCmd.SetUnitCategory("Magnetic flux density");
}

B4cDetectorConstruction::~B4cDetectorConstruction()
{
  //  delete fMagField;
  //  delete fMessenger;
}

G4VPhysicalVolume* B4cDetectorConstruction::Construct()
{
  // Define materials
  DefineMaterials();

  // Define volumes
  return DefineVolumes();

}

void B4cDetectorConstruction::DefineMaterials()
{
  // Lead material defined using NIST Manager
  G4NistManager* nistManager = G4NistManager::Instance();
  G4bool fromIsotopes = false;
  nistManager->FindOrBuildMaterial( "G4_Pb", fromIsotopes );
  nistManager->FindOrBuildMaterial( "G4_Fe", fromIsotopes );
  nistManager->FindOrBuildMaterial( "G4_POLYSTYRENE", fromIsotopes );
  nistManager->FindOrBuildMaterial( "G4_He", fromIsotopes );
  nistManager->FindOrBuildMaterial( "G4_AIR", fromIsotopes );

  // Vacuum
  G4double a;  // mass of a mole;
  G4double z;  // z=mean number of protons;
  G4double density;

  new G4Material("Galactic", z = 1., a = 1.01 * g / mole, density = universe_mean_density,
		 kStateGas, 2.73 * kelvin, 3.e-18 * pascal);

  // Print materials
  //  G4cout << *(G4Material::GetMaterialTable()) << G4endl;
}

G4VPhysicalVolume* B4cDetectorConstruction::DefineVolumes()
{

  // Geometry parameters, vital parameters were assigned to private members

  G4double layerThickness	= absoThickness + gapThickness;
  G4double layerThickness2	= absoThickness2 + gapThickness2;
  G4double calorThickness	= nofLayers * layerThickness;
  G4double calorThickness2	= nofLayers2 * layerThickness2;

  G4double worldSizeXY		= 10.0 * ( 5.0 * calorSizeXY );
  G4double worldSizeZ		= 5.0 * ( 4 * calorThickness2 + calorThickness );

  // Get materials
  G4Material* defaultMaterial	= G4Material::GetMaterial( "Galactic" );
  G4Material* absorberMaterial	= G4Material::GetMaterial( "G4_Pb" );
  G4Material* absorberMaterial2	= G4Material::GetMaterial( "G4_Fe" );
  G4Material* gapMaterial	= G4Material::GetMaterial( "G4_POLYSTYRENE" );
  G4Material* airMaterial	= G4Material::GetMaterial( "G4_AIR" );

  if ( ! defaultMaterial || ! absorberMaterial || ! absorberMaterial2 || ! gapMaterial )
    {
      G4cerr << "Cannot retrieve materials already defined. " << G4endl;
      G4cerr << "Exiting application " << G4endl;
      exit(1);
    }
  
  // G4MaterialPropertiesTable* mtpt = new G4MaterialPropertiesTable();
  // gapMaterial->SetMaterialPropertiesTable( mtpt );
  // gapMaterial->GetIonisation()->SetBirksConstant( 0.2 * mm / MeV );

  // World
  G4VSolid* worldS = new G4Box("World", worldSizeXY/2, worldSizeXY/2, worldSizeZ/2); // name and size
  G4LogicalVolume* worldLV = new G4LogicalVolume( worldS, defaultMaterial, "World"); // solid, material, and name

  // if you want to fill the world with air, 
  //G4LogicalVolume* worldLV = new G4LogicalVolume( worldS, airMaterial, "World"); // solid, material, and name
  
  G4VPhysicalVolume* worldPV = new G4PVPlacement( 0, G4ThreeVector(),       // no rotation, position at (0,0,0)
						  worldLV, "World", 0,       // logical volume, name, and mother  volume
						  false, 0, fCheckOverlaps); // no boolean operation, copy number, checking overlaps

  // Calorimeter
  G4LogicalVolume* calorLV[num_of_towers_hcal][num_of_towers_hcal];
  G4LogicalVolume* calor2LV[num_of_towers_hcal][num_of_towers_hcal];
  G4LogicalVolume* calor3LV[num_of_towers_hcal][num_of_towers_hcal];
  char bu[200];
  char bu2[200];
  char bu3[200];

  for( int i=0; i<num_of_towers_hcal; i++ )
    {
      for( int j=0; j<num_of_towers_hcal; j++ )
	{
	  sprintf( bu, "Calorimeter1%02d%02d", i, j );
	  //sprintf( bu2, "calor%02d%02d", i, j );
	  sprintf( bu3, "Calorimeter2%02d%02d", i, j);

	  G4VSolid* calorimeterS
	    = new G4Box("Calorimeter",hadcell/2, hadcell/2, calorThickness2/2); // name and size
	  calorLV[i][j]  = new G4LogicalVolume( calorimeterS, defaultMaterial, bu ); // solid, material, and name
	  calor2LV[i][j] = new G4LogicalVolume( calorimeterS, defaultMaterial, bu3);

//calor3LV[i][j] = new G4LogicalVolume(calorimeterS,defaultMaterial,bu2);

	  G4ThreeVector pos_cal = G4ThreeVector( -num_of_towers_hcal * hadcell / 2 + hadcell / 2 + i * hadcell,
						  num_of_towers_hcal * hadcell / 2 - hadcell / 2 - j * hadcell,
						 calorThickness / 2 + calorThickness2 / 2 );  // at (0,0,0)

	  new G4PVPlacement( 0, pos_cal,                // no rotation, postion
			     calorLV[i][j], bu, worldLV, // logical volume, nameand mother volume
			     false, 0, fCheckOverlaps ); // no boolean operation, copy number, and checking overlaps

	  G4ThreeVector pos_cal2 = G4ThreeVector( -num_of_towers_hcal * hadcell / 2 + hadcell / 2 + i * hadcell,
						  num_of_towers_hcal * hadcell / 2 - hadcell / 2 - j * hadcell,
	   					  3 * calorThickness2 / 2 + calorThickness / 2 );
	  new G4PVPlacement(0, pos_cal2, 
	   		    calor2LV[i][j], bu3, worldLV,
	   		    false, i+j, fCheckOverlaps );
	  
	  //	New G4PVPlacement(0,G4ThreeVector(-25.*cm+i*10.*cm,25.*cm-j*10.*cm,5*calorThickness2/2+calorThickness/2),calor3LV[i][j],bu2,worldLV,false,i+j,fCheckOverlaps);
	} // end of j-loop
    } // end of i-loop


  G4LogicalVolume* calorEM[num_of_towers_ecal][num_of_towers_ecal];
  G4int copynono=0;
  for( int i=0; i<num_of_towers; i++ )
    {
      for( int j=0; j<num_of_towers; j++ )
	{
	  sprintf(bu, "CalorimeterEM%02d%02d", i ,j );
	  //	sprintf(bu2,"calorem%02d%02d",i,j);

	  G4VSolid* calorimeterEM = new G4Box( "CalorimeterEM_" ,emcell / 2, emcell / 2, calorThickness / 2); // name and size
	  calorEM[i][j] = new G4LogicalVolume( calorimeterEM, defaultMaterial, bu );

	  //G4cout<< -27.5+5*i<<"meow "<<27.5-5*j<<G4endl;
	  int copy_num = i * num_of_towers + j;
	  new G4PVPlacement( 0, G4ThreeVector(-27.5*cm+i*5.*cm,27.5*cm-j*5.*cm,0.),
			     calorEM[i][j], bu, worldLV,
			     false, copy_num, fCheckOverlaps );
	}
    }

  // Layer
  G4LogicalVolume* layerLV[num_of_towers_hcal][num_of_towers_hcal];
  G4LogicalVolume* layer2LV[num_of_towers_hcal][num_of_towers_hcal];
  G4LogicalVolume* layer3LV[num_of_towers_hcal][num_of_towers_hcal];

  for( int i=0; i<num_of_towers_hcal; i++ )
    {

      for( int j=0; j<num_of_towers_hcal; j++ )
	{
	  sprintf( bu , "Layer1%02d%02d" , i, j );
	  sprintf( bu2, "Layer2%02d%02d", i, j );
	  sprintf( bu3, "Layer3%02d%02d", i, j );
	  G4VSolid* layerS
	    = new G4Box("Layer", hadcell/2, hadcell/2, layerThickness2/2); // name and size

	  layerLV[i][j]  = new G4LogicalVolume( layerS, defaultMaterial, bu  ); // solid, material, and name
	  layer2LV[i][j] = new G4LogicalVolume( layerS, defaultMaterial, bu2 );
	  //layer3LV[i][j]=new G4LogicalVolume(layerS,defaultMaterial,bu3);
	  
	  new G4PVReplica( "Layer", layerLV[i][j], calorLV[i][j], // name, logical volume,and mother
			  kZAxis, nofLayers2, layerThickness2 );  // axis of replication, number of replica, and  witdth of replica
	  new G4PVReplica("Layer2", layer2LV[i][j], calor2LV[i][j],
			  kZAxis, nofLayers2, layerThickness2 );
	  //new G4PVReplica("Layer3",layer3LV[i][j],calor3LV[i][j],kZAxis,nofLayers2,layerThickness2);
	}
    }

  G4LogicalVolume* layerEMLV[num_of_towers_ecal][num_of_towers_ecal];
  for( int i=0; i<num_of_towers; i++ )
    {
      for( int j=0; j<num_of_towers; j++ )
	{
	  sprintf( bu, "LayerEM%02d%02d", i, j );

	  G4VSolid* layerEM = new G4Box("LayerEM__", emcell / 2, emcell / 2, layerThickness / 2); // name and size
	  layerEMLV[i][j] = new G4LogicalVolume( layerEM, defaultMaterial, bu );
	  new G4PVReplica( "LayerEM_", layerEMLV[i][j], calorEM[i][j],
			   kZAxis, nofLayers, layerThickness );

	}

    }

  // Absorber
  G4LogicalVolume* absorberLV[num_of_towers_hcal][num_of_towers_hcal];
  G4LogicalVolume* absorberLV2[num_of_towers_hcal][num_of_towers_hcal];
  G4LogicalVolume* absorberLV3[num_of_towers_hcal][num_of_towers_hcal];

  for( int i=0; i<num_of_towers_hcal; i++ )
    {
      for( int j=0; j<num_of_towers_hcal; j++ )
	{
	  sprintf(bu,"Abso1%02d%02d",i,j);
	  sprintf(bu2,"Abso2%02d%02d",i,j);
	  sprintf(bu3,"Abso2%02d%02d",i,j);

	  G4VSolid* absorberS = new G4Box("Abso", hadcell / 2, hadcell / 2, absoThickness2 / 2); // name and size

	  absorberLV[i][j]  = new G4LogicalVolume( absorberS, absorberMaterial2, bu  );  // solid, material, and name 
	  absorberLV2[i][j] = new G4LogicalVolume( absorberS, absorberMaterial2, bu2 );
	  //absorberLV3[i][j] = new G4LogicalVolume(absorberS,absorberMaterial2,bu3);

	  new G4PVPlacement( 0, G4ThreeVector(0.0, 0.0, -gapThickness2 / 2), // no rotation, position
			    absorberLV[i][j], "Abso", layerLV[i][j],         // logical volume, name, and mother  volume
			    false, i * num_of_towers_hcal + j, fCheckOverlaps );  // no boolean operation, copy number, and checking overlaps

	  new G4PVPlacement( 0, G4ThreeVector(0.0, 0.0, -gapThickness2 / 2),
			     absorberLV2[i][j], "Abso2", layer2LV[i][j],
			     false, i * num_of_towers_hcal + j, fCheckOverlaps );
	  //new G4PVPlacement(0,G4ThreeVector(0.,0.,-gapThickness2/2),
	  // absorberLV3[i][j],"Abs32",layer3LV[i][j],false, i* num_of_towers_hcal + j, fCheckOverlaps);

	}
    }

  G4LogicalVolume* absorberEMLV[num_of_towers_ecal][num_of_towers_ecal];
  copynono = 0;
  G4VisAttributes* ecalAbsorberCol = new G4VisAttributes( true , G4Colour( 0.725, 0.403, 0.780, 0.7 ) ); // Pb
  ecalAbsorberCol->SetForceSolid( true );
  
  for( int i=0; i<num_of_towers; i++ )
    {
      for( int j=0; j<num_of_towers; j++ )
	{
	  sprintf( bu, "AbsoEM%02d%02d", i, j );
	  G4VSolid* absorberEM = new G4Box("AbsoEM", emcell / 2, emcell / 2, absoThickness / 2); // name and size
	  
	  absorberEMLV[i][j] = new G4LogicalVolume( absorberEM, absorberMaterial, bu );
	  absorberEMLV[i][j]->SetVisAttributes( ecalAbsorberCol );
	  
	  new G4PVPlacement(0, G4ThreeVector(0.,0.,-gapThickness/2),
			    absorberEMLV[i][j],"ABsoem", layerEMLV[i][j],
			    false, i * num_of_towers + j, fCheckOverlaps );
	}

    }

  // Gap
  char buffer [200];
  G4LogicalVolume* gapLV[num_of_towers_hcal][num_of_towers_hcal];
  G4LogicalVolume* gapLV2[num_of_towers_hcal][num_of_towers_hcal];
  G4LogicalVolume* gapLV3[num_of_towers_hcal][num_of_towers_hcal];

  for( int i=0; i<num_of_towers_hcal; i++ )
    {
      for( int j=0; j<num_of_towers_hcal; j++ )
	{
	  sprintf( buffer, "gap1%02d%02d" , i, j );
	  sprintf( bu2   , "gap2%02d%02d", i, j );
	  sprintf( bu3   , "gap3%02d%02d", i, j );

	  G4VSolid* gapS = new G4Box("Gap", hadcell / 2, hadcell / 2, gapThickness2 / 2); // name and size

	  gapLV[i][j]  = new G4LogicalVolume( gapS, gapMaterial, buffer ); // solid, material, and name
	  gapLV2[i][j] = new G4LogicalVolume( gapS, gapMaterial, bu2 );
	  //gapLV3[i][j] = new G4LogicalVolume(gapS,gapMaterial,bu3);

	  new G4PVPlacement( 0, G4ThreeVector(0.0,  0.0,  absoThickness2 / 2), // no rotation, its position
			    gapLV[i][j], buffer, layerLV[i][j],                // logical volume, name, mother  volume
			    false,  i * num_of_towers_hcal + j, fCheckOverlaps );               // no boolean operation,  copy number, checking overlaps

	  new G4PVPlacement( 0, G4ThreeVector(0.0, 0.0, absoThickness2 / 2),
			     gapLV2[i][j], bu2, layer2LV[i][j],
			     false, i * num_of_towers_hcal + j, fCheckOverlaps );
	  // new G4PVPlacement(0,G4ThreeVector(0.,0., absoThickness2/2),
	  // gapLV3[i][j],bu3,layer3LV[i][j],false,i+j,fCheckOverlaps);

	}
    }

  G4LogicalVolume* gapEMLV[num_of_towers_ecal][num_of_towers_ecal];
  copynono=0;
  for( int i=0; i<num_of_towers; i++ )
    {
      for( int j=0; j<num_of_towers; j++ )
	{
	  sprintf( bu3, "gapEM%02d%02d", i, j );

	  G4VSolid* gapEM = new G4Box("GapEM_", emcell / 2, emcell / 2, gapThickness / 2); // name, size
	  gapEMLV[i][j] = new G4LogicalVolume( gapEM, gapMaterial, bu3 );
	  new G4PVPlacement( 0, G4ThreeVector(0.0, 0.0, absoThickness / 2),
			     gapEMLV[i][j], bu3, layerEMLV[i][j],
			     false, i * num_of_towers + j, fCheckOverlaps );
	}
    }

  // print parameters
  G4cout << "\n------------------------------------------------------------"
         << "\n---> The calorimeter is " << nofLayers << " layers of: [ "
         << absoThickness/mm << "mm of " << absorberMaterial->GetName()
         << " + "
         << "\n------------------------------------------------------------\n";

  
  // Visualization attributes
  worldLV->SetVisAttributes( G4VisAttributes::Invisible );

  G4VisAttributes* simpleBoxVisAtt= new G4VisAttributes( G4Colour(1,0,0, 0) );
  simpleBoxVisAtt->SetVisibility( false );

  G4VisAttributes* hcalAbsorberCol = new G4VisAttributes( true , G4Colour( 0.238, 0.732, 0.827, 0.9 ) ); // Fe
  hcalAbsorberCol->SetForceSolid( true );

  G4VisAttributes* hcalAbsorberCol2 = new G4VisAttributes( true , G4Colour( 0.215, 0.706, 0.565, 0.9 ) ); // Fe
  hcalAbsorberCol->SetForceSolid( true );

  G4VisAttributes* gapCol = new G4VisAttributes( true , G4Colour( 1, 1, 1, 1 ) ); // polystyrene
  gapCol->SetForceSolid( true );
  //  gapCol->SetForceWireframe( true );

  for( int i=0; i<num_of_towers_hcal; i++ )
    {
      for( int j=0; j<num_of_towers_hcal; j++ )
	{
	  //	  if( i==0 || i==5 || j==0 || j==5 )
	  //	    continue;
	  
	  //	  G4VisAttributes* simpleBoxVisAtt = new G4VisAttributes(G4Colour(i,j,1));
	  //	  simpleBoxVisAtt->SetVisibility( false );
	  calorLV[i][j]->SetVisAttributes( simpleBoxVisAtt );
	  calor2LV[i][j]->SetVisAttributes( simpleBoxVisAtt );

	  layerLV[i][j]->SetVisAttributes( simpleBoxVisAtt );
	  layer2LV[i][j]->SetVisAttributes( simpleBoxVisAtt );

	  absorberLV[i][j]->SetVisAttributes( hcalAbsorberCol );
	  absorberLV2[i][j]->SetVisAttributes( hcalAbsorberCol2 );

	  gapLV[i][j]->SetVisAttributes( gapCol );
	  gapLV2[i][j]->SetVisAttributes( gapCol );
	  //gapLV3[i][j]->SetVisAttributes( gapCol );
	}
    }

  for( int i=0; i<num_of_towers; i++)
    for( int j=0; j<num_of_towers; j++)
      {
	calorEM[i][j]->SetVisAttributes( simpleBoxVisAtt );
	layerEMLV[i][j]->SetVisAttributes( simpleBoxVisAtt );
	gapEMLV[i][j]->SetVisAttributes( gapCol );
      }

  // Always return the physical World
  return worldPV;
}

void B4cDetectorConstruction::DefineVolumes_Ecal()
{
}

void B4cDetectorConstruction::DefineVolumes_Hcal()
{
}

void B4cDetectorConstruction::DefineVolumes_Wall()
{
}

//void B4cDetectorConstruction::SetMagField(G4double fieldValue)
void B4cDetectorConstruction::ConstructSDandField()
{

  // Sensitive detectors
  B4cCalorimeterSD* absoSD[num_of_towers_hcal][num_of_towers_hcal];
  B4cCalorimeterSD* gapSD[num_of_towers_hcal][num_of_towers_hcal];
  B4cCalorimeterSD* abso2SD[num_of_towers_hcal][num_of_towers_hcal];
  B4cCalorimeterSD* gap2SD[num_of_towers_hcal][num_of_towers_hcal];
  //  B4cCalorimeterSD* abso3SD[num_of_towers_hcal][num_of_towers_hcal];
  //  B4cCalorimeterSD* gap3SD[num_of_towers_hcal][num_of_towers_hcal];

  for( int detector_num=0; detector_num<2; detector_num++ )
    {
      for( int i=0; i<num_of_towers_hcal; i++ )
	{
	  for( int j=0; j<num_of_towers_hcal; j++ )
	    {
	      std::stringstream num;
	      num  << std::setw(2) <<  std::setfill( '0' ) << i << std::setw(2) << std::setfill('0') << j;

	      std::stringstream absorber_LV, absorber_HC, absorber_SD, gap_LV, gap_HC, gap_SD;	      
	      absorber_LV << "Abso" << detector_num+1 << num.str();
	      absorber_HC << "Absorber" << detector_num+1 << "HitsCollection" << num.str();
	      absorber_SD << "Absorber" << detector_num+1 << "SD" << num.str();
	      	      
	      absoSD[i][j] = new B4cCalorimeterSD( absorber_SD.str().c_str(), absorber_HC.str().c_str(), nofLayers2 );
	      G4SDManager::GetSDMpointer()->AddNewDetector( absoSD[i][j] );
	      SetSensitiveDetector( absorber_LV.str().c_str(), absoSD[i][j] );

	      gap_LV << "gap" << detector_num+1 << num.str();
	      gap_HC << "Gap" << detector_num+1 << "HitsCollection" << num.str();
	      gap_SD << "Gap" << detector_num+1 << "SD" << num.str();
	  
	      gapSD[i][j] = new B4cCalorimeterSD( gap_SD.str().c_str(), gap_HC.str().c_str(), nofLayers2 );
	      G4SDManager::GetSDMpointer()->AddNewDetector( gapSD[i][j] );
	      SetSensitiveDetector( gap_LV.str().c_str(), gapSD[i][j] );
	      
	    } // end of the loop j
	} // end of the loop i
    } // end of the loop detector_num
  
  B4cCalorimeterSD* absoEMSD[num_of_towers_ecal][num_of_towers_ecal];
  B4cCalorimeterSD* gapEMSD[num_of_towers_ecal][num_of_towers_ecal];

  for( int i=0; i<num_of_towers_ecal; i++ )
    {
      for( int j=0; j<num_of_towers_ecal; j++ )
	{
	  std::stringstream num;
	  num  << std::setw(2) <<  std::setfill( '0' ) << i << std::setw(2) << std::setfill('0') << j;

	  std::stringstream absorber_LV, absorber_HC, absorber_SD, gap_LV, gap_HC, gap_SD;

	  absorber_LV << "AbsoEM" << num.str();
	  absorber_HC << "AbsorberEMHitsCollection" << num.str();
	  absorber_SD << "AbsorberEMSD" << num.str();

	  gap_LV << "gapEM" << num.str();
	  gap_HC << "GapEMHitsCollection" << num.str();
	  gap_SD << "GapEMSD" << num.str();

	  // for absorbers
	  absoEMSD[i][j] = new B4cCalorimeterSD( absorber_SD.str().c_str(), absorber_HC.str().c_str(), nofLayers ); // name, hits coolection name, no of cells
	  G4SDManager::GetSDMpointer()->AddNewDetector( absoEMSD[i][j] );
	  SetSensitiveDetector( absorber_LV.str().c_str(), absoEMSD[i][j] );

	  // for gaps
	  gapEMSD[i][j] = new B4cCalorimeterSD( gap_SD.str().c_str(), gap_HC.str().c_str(), nofLayers );
	  G4SDManager::GetSDMpointer()->AddNewDetector( gapEMSD[i][j] );
	  SetSensitiveDetector( gap_LV.str().c_str() , gapEMSD[i][j]);
	}

    }


  /*
  // Apply a global uniform magnetic field along X axis
  G4FieldManager* fieldManager
    = G4TransportationManager::GetTransportationManager()->GetFieldManager();

  // Delete the existing magnetic field
  if ( fMagField )  delete fMagField;

  if ( fieldValue != 0. )
    {
      // create a new one if not null
      fMagField
	= new G4UniformMagField(G4ThreeVector(fieldValue, 0., 0.));
      
      fieldManager->SetDetectorField(fMagField);
      fieldManager->CreateChordFinder(fMagField);
    }
  else
    {
      fMagField = 0;
      fieldManager->SetDetectorField(fMagField);
    }
  */
}
